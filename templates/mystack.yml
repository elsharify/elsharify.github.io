---
##AWSTemplateFormatVersion: '2010-09-09'
heat_template_version: 2013-05-23
description: Sample Heat template that spins up multiple instances and a private network
parameters:
  image0:
    type: string
    label: Image name or ID for instance 0
    description: Image to be used for compute instance0
    #default: cirros-0.3.3-x86_64
    constraints:
      - custom_constraint: glance.image
  image1:
    type: string
    label: Image name or ID for instance 1
    description: Image to be used for compute instance1
    default: cirros-0.3.3-x86_64
    constraints:
      - custom_constraint: glance.image
  flavor0:
    type: string
    label: Flavor for instance 0
    description: type of instance (flavor) to be used
    default: m1.small
    constraints:
      - custom_constraint: nova.flavor
  flavor1:
    type: string
    label: Flavor for instance 1
    description: type of instance (flavor) to be used
    default: m1.small
    constraints:
      - custom_constraint: nova.flavor
  key:
    type: string
    label: Key name
    description: Name of key-pair to be used for compute instance
    #default: drmadmin
    constraints:
      - custom_constraint: nova.keypair
  public_net:
    type: string
    description: public network id
    constraints:
      - custom_constraint: neutron.network
  #public_subnet:
  #  type: string
  #  description: public subnet id
    #network:
        #Ref: public_net
  #  constraints:
  #    - custom_constraint: neutron.subnet
  # mystack_secgrp:
  #   type: string
  #   description: Mystack Security Group
resources:
  mystack-net:
    type: OS::Neutron::Net
    properties:
      name: mystack-net
  mystack-subnet:
    type: OS::Neutron::Subnet
    properties:
      name: mystack-subnet
      cidr: 10.10.10.0/24
      dns_nameservers:
      - 172.21.64.23
      - 172.21.64.26
      enable_dhcp: 'True'
      gateway_ip: 10.10.10.254
      network_id:
        Ref: mystack-net
  mystack-router:
    type: OS::Neutron::Router
    properties:
      admin_state_up: 'True'
      name: mystack-router
  mystack-router_gw:
    type: OS::Neutron::RouterGateway
    properties:
      network_id: { get_param: public_net }
      router_id:
        Ref: mystack-router
  mystack-router-int0:
    type: OS::Neutron::RouterInterface
    properties:
      router_id:
        Ref: mystack-router
      subnet_id:
        Ref: mystack-subnet
  mystack_secgrp:
    type: OS::Neutron::SecurityGroup
    properties:
      name: mystack_secgrp
      description: Ping and SSH and web
      rules:
      - protocol: icmp
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22
      - protocol: tcp
        port_range_min: 80
        port_range_max: 80
      - protocol: tcp
        port_range_min: 443
        port_range_max: 443
      - protocol: tcp
        port_range_min: 3306
        port_range_max: 3306
  instance0_port0:
    type: OS::Neutron::Port
    properties:
      admin_state_up: 'True'
      network_id:
        Ref: mystack-net
      security_groups: [{ get_resource: mystack_secgrp }]
  instance1_port0:
    type: OS::Neutron::Port
    properties:
      admin_state_up: 'True'
      network_id:
        Ref: mystack-net
      security_groups: [{ get_resource: mystack_secgrp }]
  instance0:
    type: OS::Nova::Server
    properties:
      name: instance0
      image: { get_param: image0 } 
      flavor: { get_param: flavor0 }
      key_name: { get_param: key }
      networks:
      - port:
          Ref: instance0_port0
  instance1:
    type: OS::Nova::Server
    properties:
      name: instance1
      image: { get_param: image1 } 
      flavor: { get_param: flavor1 }
      key_name: { get_param: key }
      networks:
      - port:
          Ref: instance1_port0
  instance0_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      #floating_subnet: { get_param: public_subnet }
      port_id: { get_resource: instance0_port0 }
    depends_on:
  instance1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      #floating_subnet: { get_param: public_subnet }
      port_id: { get_resource: instance1_port0 }
  instance0_floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: instance0_floating_ip }
      port_id: { get_resource: instance0_port0 }
  instance1_floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: instance1_floating_ip }
      port_id: { get_resource: instance1_port0 }
